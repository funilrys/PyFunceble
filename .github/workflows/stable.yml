name: Stable Deployment Workflow
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  schedule:
    - cron: "0 0 * * *"

jobs:
  lint:
    name: Lint PyFunceble

    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        python_version:
          - "3.9"
        os:
          - ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Clone repository

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pylint

      - name: Lint PyFunceble with Pylint
        run: pylint PyFunceble

      - name: Lint tests with Pylint
        run: pylint tests

  deps_safety_check:
    name: Check the safety of our dependencies.

    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        python_version:
          - "3.9"
        os:
          - ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Clone repository

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install safety

      - name: Check the safety of our dependencies.
        run: safety check

  test:
    needs: [lint, deps_safety_check]
    name: "[${{ matrix.os }}] Test PyFunceble with Python ${{ matrix.python_version }}"

    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        python_version:
          - "3.7.9"
          - "3.8.6"
          - "3.9"
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v2
        name: Clone repository

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install tox coveralls

      - name: Test PyFunceble as defined by tox.ini
        run: |
          tox -c tox.ini

      - name: Upload Coverage
        run: |
          coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_PARALLEL: true

  coveralls:
    needs: test
    name: Finish Coveralls

    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        python_version:
          - "3.9"
        os:
          - ubuntu-latest

    steps:
      - name: Sending finish flag to coveralls.io
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  deploy_to_pypi:
    needs: [run_cli, run_cli_mariadb]
    name: "Deploy ðŸ“¦ to the PyPi"

    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        python_version:
          - "3.9"
        os:
          - ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Clone repository

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          pip install twine wheel setuptools

      - name: Build ðŸ“¦
        run: |
          python setup.py sdist bdist_wheel

      - name: Check ðŸ“¦
        run: |
          twine check dist/*

      - name: Publish ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true

  deploy_to_docker_hub:
    needs: [run_cli, run_cli_mariadb]
    name: "Deploy ðŸ“¦ to the Docker Hub"

    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        python_version:
          - "3.9"
        os:
          - ubuntu-latest

    env:
      DOCKER_PYTHON_VERSION: "3.9"
      BUILDER_CLONE_DIRNAME: pyfunceble_docker
      OUR_DOCKER_USERNAME: ${{ secrets.OUR_DOCKER_USERNAME }}
      OUR_DOCKER_PASSWORD: ${{ secrets.OUR_DOCKER_PASSWORD }}
      OUR_DOCKER_EMAIL: ${{ secrets.OUR_DOCKER_EMAIL }}

    steps:
      - uses: actions/checkout@v2
        name: Clone repository

      - uses: actions/checkout@v2
        name: Clone docker ðŸ“¦ repository
        with:
          repository: PyFunceble/docker
          path: ${{ env.BUILDER_CLONE_DIRNAME }}/

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          pip install ${{ env.BUILDER_CLONE_DIRNAME }}/.

      - name: Get version of builder
        run: |
          pyfunceble-docker-builder --version

      - name: Build, Check and Publish ðŸ“¦
        run: >
          pyfunceble-docker-builder -b ${{ env.BUILDER_CLONE_DIRNAME }}/builder
          -p "$(python setup.py --name)"
          --pyfunceble-version="$(python setup.py --version)"
          --python-version="${DOCKER_PYTHON_VERSION}"
          --is-latest --publish --commit="$(git log -1 --format=format:'%H')"

  deploy_to_aur:
    needs: deploy_to_pypi
    name: "Deploy ðŸ“¦ to the AUR"

    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest

    container:
      image: archlinux

    steps:
      - name: Store the SSH key
        run: |
          echo "${{ secrets.AUR_SSH_KEY }}" | install -Dm600 /dev/stdin /root/.ssh/id_rsa

      - name: Get time for cache
        id: cache_time
        run: echo "::set-output name=time::$(date +%F-%T)"

      - name: Set up cache
        uses: actions/cache@master
        with:
          path: /var/cache/pacman/pkg
          key: pacman-cache-x86_64-${{ steps.cache_time.outputs.time }}
          restore-keys: pacman-cache-x86_64-

      - name: Install dependencies
        run: |
          mkdir -p /var/lib/pacman/
          pacman -Syu --noconfirm
          pacman -S --needed --noconfirm git binutils pacman-contrib openssh rsync python python-setuptools

      - uses: actions/checkout@v2
        name: Clone repository

      - name: Publish ðŸ“¦ to the AUR - if necessary
        env:
          GIT_SSH_COMMAND: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
        run: |
          aurRepoDir=/tmp/pyfunceble
          githubRepoDir="${PWD}"
          buildDir="/tmp/build"

          latest=$(python3 setup.py --version)

          git config --global user.name ${{ github.actor }}
          git config --global user.email ${{ secrets.GIT_EMAIL }}
          git clone ssh://aur@aur.archlinux.org/pyfunceble.git ${aurRepoDir}

          rsync --progress --delete -r --exclude={'*.gz','*.xz','.github','pkg','src','.git','LICENSE'} ${aurRepoDir}/ ${buildDir}/

          cd ${buildDir}

          current=$(grep -P "^pkgver" PKGBUILD | cut -d= -f2)

          echo "Previous version: ${current}"
          echo "New version: ${latest}"

          [[ "${current}" == "${latest}" ]] && exit 0

          useradd makepkg
          chown makepkg:root . -R

          sed "/^pkgver=/s/.*/pkgver=${latest}/" -i PKGBUILD
          sed "/^pkgrel=/s/.*/pkgrel=1/" -i PKGBUILD

          su makepkg -c "updpkgsums"
          su makepkg -c "makepkg --printsrcinfo" > .SRCINFO

          rsync --progress --delete -r --exclude={'*.gz','*.xz','.github','pkg','src','.git','LICENSE'} ${buildDir}/ ${aurRepoDir}/

          cd ${aurRepoDir}

          git add .
          git diff --quiet --exit-code --cached || git commit -m "Update PyFunceble to v${latest}"
          git push origin master
